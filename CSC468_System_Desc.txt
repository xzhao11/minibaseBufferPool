CSC 468 Final Project

We modified the Minibase DBMS with 3 new buffer pool algorithms.
The existing system had support for the Clock, Most Recently Used (MRU), and Least Recently Used (LRU) algorithms.
We added support for the Least Frequently Used (LFU), Last In First Out (LIFO), and Random choice algorithms.

LFU:

LIFO:
This algorithm was implemented as a LIFO stack as a simple array in Java. 
While an ArrayList would be easier to work with, the existing codebase used the array implementation in other areas so it was used here as well.

When new frames were added to the buffer pool they were added to the top of the stack until the stack was full.
When the buffer pool was full, any new frames just overrote the top frame of the stack (the first frame in the array) since it was the last one in.


Random:
This algorithm was implemented using the Random java libary.
Before the buffer pool is full, new frames are added sequentially.
Once the buffer pool was full, the algorithm randomly chose the next victim. 

How to Run:
cd src/tests
make <test_type>
make <test_type_run>

*See src/tests/Makefile for specific commands
**test_type is the type of algorithm you want to test_type
**test_type_run will run the commands needed to run the files made from test_type

Notes:
- Our algorithms were required to "pin" based on the original implementation even though pinning was not needed
- Our algorithms do not pass the original test 3 as this test is specific to the Clock algorithm and pinning
